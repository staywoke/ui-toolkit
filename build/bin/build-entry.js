const fs = require('fs')
const path = require('path')
const render = require('json-templater/string');
const uppercamelcase = require('uppercamelcase');
const pathComponents = path.join(__dirname, '../../src/components');
const version = process.env.VERSION || require('../../package.json').version;

const IMPORT_TEMPLATE = 'import {{name}} from \'./{{package}}\';';
const MAIN_TEMPLATE = `/* Generated by './build/bin/build-entry.js' */{{imports}}

module.exports = {
  {{exports}}
};
`;

let completed = {
  atoms: false,
  molecules: false,
  organisms: false,
  pages: false,
  templates: false
};

let components = {
  imports: ['\n'],
  exports: [`version: '${version}'`]
};

const parseDir = function(rootDir, level, cb) {
  var modules = {
    imports: ['\n'],
    exports: [`version: '${version}'`]
  };

  fs.readdir(rootDir, function(err, files) {
    for (var index = 0; index < files.length; ++index) {
      var file = files[index];
      if (file[0] !== '.') {
        var filePath = rootDir + '/' + file;
        fs.stat(filePath, function(err, stat) {
          if (stat.isDirectory()) {

            let componentName = uppercamelcase(this.file);
            let name = this.file;

            components['imports'].push(render(IMPORT_TEMPLATE, {
              name: componentName,
              package: level + '/' + name
            }));

            components['exports'].push(componentName);

            modules['imports'].push(render(IMPORT_TEMPLATE, {
              level: level,
              name: componentName,
              package: name
            }));

            modules['exports'].push(componentName);
          }
          if (files.length === (this.index + 1)) {
            completed[level] = true;
            return cb(modules);
          }
        }.bind({ index: index, file: file }));
      }
    }
  });
}

const checkDone = function () {
  if (!completed.atoms || !completed.molecules || !completed.organisms || !completed.pages || !completed.templates) {
    return;
  }

  fs.writeFileSync(path.join(pathComponents, 'index.js'), render(MAIN_TEMPLATE, {
    imports: components.imports.join('\n'),
    exports: components.exports.join(',\n  ')
  }));
}

const processComponents = function (type) {
  const dir = path.join(pathComponents, type);

  parseDir(dir, type, function(results) {
    fs.writeFileSync(path.join(dir, 'index.js'), render(MAIN_TEMPLATE, {
      imports: results['imports'].join('\n'),
      exports: results['exports'].join(',\n  ')
    }));

    checkDone();
  });
}

processComponents('atoms');
processComponents('molecules');
processComponents('organisms');
processComponents('pages');
processComponents('templates');
